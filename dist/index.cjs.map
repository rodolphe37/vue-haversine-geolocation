{"version":3,"sources":["../src/utils.ts","../src/useGeolocationManager.ts","../src/adapters/localStorage.ts"],"names":["ref"],"mappings":"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","file":"index.cjs","sourcesContent":["export function getDistanceInMeters(\n  lat1: number,\n  lon1: number,\n  lat2: number,\n  lon2: number\n): number {\n  const R = 6371e3; // mètres\n  const toRad = (d: number) => (d * Math.PI) / 180;\n  const φ1 = toRad(lat1);\n  const φ2 = toRad(lat2);\n  const Δφ = toRad(lat2 - lat1);\n  const Δλ = toRad(lon2 - lon1);\n\n  const a =\n    Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +\n    Math.cos(φ1) * Math.cos(φ2) *\n      Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n}\n","import { ref } from \"vue\";\nimport { getDistanceInMeters } from \"./utils\";\nimport type { GeolocationOptions, TLocation, TLocationHistory } from \"./types\";\n\nexport function useGeolocationManager({\n  distanceThreshold = 100,\n  loadHistory,\n  saveHistory,\n}: GeolocationOptions) {\n  const history = ref<TLocationHistory>({ locations: [] });\n\n  const init = async () => {\n    const existing = await loadHistory();\n    if (existing) {\n      history.value = existing;\n    }\n  };\n\n  const addLocation = async (newLocation: TLocation) => {\n    const updatedHistory: TLocationHistory = {\n      locations: [...history.value.locations],\n    };\n\n    const lastLocation = updatedHistory.locations.at(-1);\n\n    let isSameCoords = false;\n\n    if (lastLocation) {\n      const distance = getDistanceInMeters(\n        lastLocation.coords.latitude,\n        lastLocation.coords.longitude,\n        newLocation.coords.latitude,\n        newLocation.coords.longitude\n      );\n\n      isSameCoords = distance < distanceThreshold;\n    }\n\n    if (isSameCoords && lastLocation) {\n      lastLocation.timestamp = newLocation.timestamp;\n    } else {\n      updatedHistory.locations.push(newLocation);\n    }\n\n    history.value = updatedHistory;\n    await saveHistory(updatedHistory);\n  };\n\n  return {\n    history,\n    init,\n    addLocation,\n  };\n}\n","import type { TLocationHistory } from \"../types\";\n\nconst KEY = \"geo-history\";\n\nexport const loadFromLocalStorage = async (): Promise<TLocationHistory | null> => {\n  const raw = typeof window !== \"undefined\" ? localStorage.getItem(KEY) : null;\n  return raw ? (JSON.parse(raw) as TLocationHistory) : null;\n};\n\nexport const saveToLocalStorage = async (h: TLocationHistory): Promise<void> => {\n  if (typeof window !== \"undefined\") {\n    localStorage.setItem(KEY, JSON.stringify(h));\n  }\n};\n"]}